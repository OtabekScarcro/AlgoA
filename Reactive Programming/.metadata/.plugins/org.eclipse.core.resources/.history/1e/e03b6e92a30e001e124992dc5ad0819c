package org.javacoders;

import org.javacoders.courseUtil.Util;

import reactor.core.publisher.Mono;
import reactor.util.retry.Retry;

public class Lec04RetryWhenAdvance {
	
	public static void main(String[] args) {
		
		orderService(Util.faker().business().creditCardNumber())
				.doOnError(err -> System.out.println(err.getMessage()))
				.retryWhen(Retry.from(flux -> flux
								.doOnNext(rs -> {
									System.out.println(rs.totalRetries());
									System.out.println(rs.failure());
								})
								.handle((rs, synchronousSink) -> {
									if(rs.failure().getMessage().equals("500"))
										synchronousSink.next(1);
									else
										synchronousSink.error(rs.failure());
								})
						))
				.subscribe(Util.subscriber());
		
		
	}
	
	
	// order service
	private static Mono<String> orderService(String ccNumber){
		return Mono.fromSupplier(() -> {
			processPayment(ccNumber);
			return Util.faker().idNumber().valid();
		});
	}
	
	// payment service
	private static void processPayment(String ccNumber) {
		int random = Util.faker().random().nextInt(1, 10);
		if(random < 8)
			throw new RuntimeException("500");
		else if(random < 10)
			throw new RuntimeException("404");
	}

}
