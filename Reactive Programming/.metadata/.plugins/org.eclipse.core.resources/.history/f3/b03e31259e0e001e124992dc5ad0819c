package org.javacoders;

import java.util.concurrent.atomic.AtomicInteger;

import org.javacoders.courseUtil.Util;

import reactor.core.publisher.Flux;

public class Lec02Retry {
	
	private static AtomicInteger atomicInteger = new AtomicInteger(1);
	
	public static void main(String[] args) {
		
		getIntegers()
			
			// we have two option
			// until the condition is false
//			.repeat(() -> atomicInteger.get() < 15)
			
			// 2 times
			.repeat(2)
			.subscribe(Util.subscriber());
		
		
		
	}

	private static Flux<Integer> getIntegers() {
		
		return Flux.range(1, 3)
				.doOnSubscribe(s -> System.out.println("Subscribed"))
				.doOnComplete(() -> System.out.println("---Completed"))
				.map(i -> atomicInteger.getAndIncrement());
		
	}
	
}
